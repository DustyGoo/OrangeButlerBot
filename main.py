import json
from random import randint

import telebot
from telebot import types

from config import TOKEN

bot = telebot.TeleBot(TOKEN)

user_flags = {}

with open('albumbase.json', encoding='utf-8') as db:
    data = json.load(db)


def create_keyboard(buttons):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*buttons)
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_flags[chat_id] = {'read_disclaimer': False}
    mainkeys = create_keyboard(['üîÆ –°–ª—É—á–∞–π–Ω—ã–π –ê–ª—å–±–æ–º',
                                'üßô‚Äç‚ôÇÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å',
                                'üìô –ü–µ—Ä–µ–π—Ç–∏ –≤ –û—Ä–∞–Ω–∂–µ–≤—ã–π –ü–∞–±–ª–∏–∫ –≤ VK'])
    mess = (f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n'
            f'–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç <b>–û—Ä–∞–Ω–∂–µ–≤–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º–∞</b>.\n\n–û–Ω –º–æ–∂–µ—Ç:\n\n'
            f'üîÆ - –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª—å–±–æ–º '
            f'—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –º—É–∑—ã–∫–æ–π.\n–°–µ–π—á–∞—Å –≤ –∞—Ä—Ö–∏–≤–µ {len(data)} –∞–ª—å–±–æ–º–æ–≤.\n\n'
            f'üßô‚Äç‚ôÇÔ∏è - –ø–æ–º–æ—á—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º '
            f'<b>–û—Ä–∞–Ω–∂–µ–≤–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º–∞</b>\n\n'
            f'üìô - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å –≤ <b>–û—Ä–∞–Ω–∂–µ–≤—ã–π –ü–∞–±–ª–∏–∫</b> –≤ –í–ö.\n–ó–∞ '
            f'–¥—é–∂–∏–Ω—É –ª–µ—Ç —Ç–∞–º –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ø–æ—á—Ç–∏ 4000 –ø–æ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω–æ–π '
            f'–º—É–∑—ã–∫–æ–π.\n\n'
            f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∫–Ω–æ–ø–æ–∫:')
    bot.send_message(chat_id, mess, reply_markup=mainkeys, parse_mode='HTML')
    bot.register_next_step_handler_by_chat_id(chat_id, sorting_function)


@bot.message_handler(content_types=['text'])
def sorting_function(message):
    chat_id = message.chat.id
    if message.text == 'üßô‚Äç‚ôÇÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è –°–≤—è–∑—å':
        bot.send_message(chat_id, "/disclaimer")
        disclaimer(message)
    elif (message.text == 'üîÆ –°–ª—É—á–∞–π–Ω—ã–π –ê–ª—å–±–æ–º' or
          message.text == 'üîÆ –ï—â—ë –û–¥–∏–Ω –°–ª—É—á–∞–π–Ω—ã–π –ê–ª—å–±–æ–º!'):
        bot.send_message(chat_id, "/randomize")
        random_album(message)
    elif message.text == 'üìô –ü–µ—Ä–µ–π—Ç–∏ –≤ –û—Ä–∞–Ω–∂–µ–≤—ã–π –ü–∞–±–ª–∏–∫ –≤ VK':
        bot.send_message(chat_id, "/vk")
        vk(message)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start(message)
    else:
        contact(message)


@bot.message_handler(commands=['disclaimer'])
def disclaimer(message):
    chat_id = message.chat.id
    basekey = create_keyboard(['üß° –Ø—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ',
                               'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    user_flags[chat_id] = {'read_disclaimer': False}
    mess = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–µ—Ä–¥–µ—á–∫–æ–º üß° –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π "
            f"–≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –æ—Ç–≤–µ—á—É –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    bot.send_message(chat_id, mess, reply_markup=basekey, parse_mode='HTML')
    bot.register_next_step_handler_by_chat_id(chat_id, contact)


@bot.message_handler(func=lambda message: message.text.count('/') == 0 and
                                          'üß° –Ø—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ'
                                          not in message.text)
def contact(message):
    chat_id = message.chat.id
    if message.reply_to_message and chat_id == 449248371:
        user_chat_id = message.reply_to_message.text.split(" : ")[0]
        bot.send_message(chat_id=user_chat_id,
                         text=f"<b>{message.text}</b>",
                         parse_mode='HTML')
        return

    if not user_flags[chat_id]['read_disclaimer']:
        if message.text == 'üß° –Ø—Å–Ω–æ-–ø–æ–Ω—è—Ç–Ω–æ':
            user_flags[chat_id][
                'read_disclaimer'] = True
            markup = types.ReplyKeyboardRemove()
            bot.send_message(chat_id,
                             "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "
                             "—Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Å—Ç–æ "
                             "–≤–≤–µ–¥–∏—Ç–µ '/start' (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É)",
                             reply_markup=markup)
            return
        else:
            bot.send_message(chat_id,
                             "–ü—É—Ç—å –∫ –æ–±—â–µ–Ω–∏—é –ª–µ–∂–∏—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–¥—Ü–µ. –ñ–º–∏ üß°.")

    if user_flags[chat_id]['read_disclaimer']:
        bot.send_message(chat_id='449248371',
                         text=f"{message.chat.id} | "
                              f"{message.from_user.first_name} : "
                              f"\n\n{message.text}")


@bot.message_handler(commands=['vk'])
def vk(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –í–ö",
                            url='https://vk.com/limited_edition_click_here'))
    bot.send_message(chat_id,
                     "üßô‚Äç‚ôÇÔ∏è –ê –≤–æ—Ç –∏ –ø–æ—Ä—Ç–∞–ª –≤ –û—Ä–∞–Ω–∂–µ–≤—ã–π –ü–∞–±–ª–∏–∫!...",
                     reply_markup=markup)

    return_button = create_keyboard(['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    bot.send_message(chat_id, "...–∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                     reply_markup=return_button)


@bot.message_handler(commands=['randomize'])
def random_album(message):
    chat_id = message.chat.id
    user_flags[chat_id] = {'read_disclaimer': False}
    onecemorekey = create_keyboard(['üîÆ –ï—â—ë –û–¥–∏–Ω –°–ª—É—á–∞–π–Ω—ã–π –ê–ª—å–±–æ–º!',
                                    'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    todayspick = data[randint(0, len(data) - 1)]
    title = todayspick['title']
    about = todayspick['about']
    links = todayspick['links']
    picture = todayspick['picture']
    link_text = " | ".join([f"<a href='{link}'>{service}</a>"
                            for service, link in links.items() if
                            link != 'none'])
    mess = f"<b>{title}</b>\n\n{about}\n\n{link_text}"
    bot.send_photo(chat_id, photo=open(picture, 'rb'))
    bot.send_message(chat_id, mess, reply_markup=onecemorekey,
                     parse_mode='HTML')
    bot.register_next_step_handler_by_chat_id(chat_id, sorting_function)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    while True:
        try:
            bot.polling(none_stop=True)
        except:
            pass